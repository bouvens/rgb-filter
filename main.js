!function(Q){function F(F){for(var U,n,s=F[0],i=F[1],l=F[2],a=0,I=[];a<s.length;a++)n=s[a],Object.prototype.hasOwnProperty.call(B,n)&&B[n]&&I.push(B[n][0]),B[n]=0;for(U in i)Object.prototype.hasOwnProperty.call(i,U)&&(Q[U]=i[U]);for(r&&r(F);I.length;)I.shift()();return t.push.apply(t,l||[]),e()}function e(){for(var Q,F=0;F<t.length;F++){for(var e=t[F],U=!0,s=1;s<e.length;s++){var i=e[s];0!==B[i]&&(U=!1)}U&&(t.splice(F--,1),Q=n(n.s=e[0]))}return Q}var U={},B={0:0},t=[];function n(F){if(U[F])return U[F].exports;var e=U[F]={i:F,l:!1,exports:{}};return Q[F].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=Q,n.c=U,n.d=function(Q,F,e){n.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:e})},n.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},n.t=function(Q,F){if(1&F&&(Q=n(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var U in Q)n.d(e,U,function(F){return Q[F]}.bind(null,U));return e},n.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return n.d(F,"a",F),F},n.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},n.p="";var s=this.webpackJsonp=this.webpackJsonp||[],i=s.push.bind(s);s.push=F,s=s.slice();for(var l=0;l<s.length;l++)F(s[l]);var r=i;t.push([24,1]),e()}({15:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzP2FhYjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n")},24:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./src/index.css\nvar src = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(2);\nvar lodash_default = /*#__PURE__*/__webpack_require__.n(lodash);\n\n// EXTERNAL MODULE: ./node_modules/gif.js/dist/gif.js\nvar dist_gif = __webpack_require__(9);\nvar gif_default = /*#__PURE__*/__webpack_require__.n(dist_gif);\n\n// CONCATENATED MODULE: ./src/logic/singletons.js\nvar DEFAULT_ID = \'DEFAULT_ID\';\nvar offScreenCanvas = [];\nfunction getCanvas() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ID;\n\n  if (!offScreenCanvas[id]) {\n    offScreenCanvas[id] = document.createElement(\'canvas\');\n  }\n\n  return offScreenCanvas[id];\n}\nvar offScreenContext = [];\nfunction getContext() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ID;\n\n  if (!offScreenContext[id]) {\n    offScreenContext[id] = getCanvas(id).getContext(\'2d\');\n  }\n\n  return offScreenContext[id];\n}\n// CONCATENATED MODULE: ./src/logic/filters/noise.js\n\nvar noiseMap = [];\n\nvar getDeviation = function getDeviation(noise) {\n  return (Math.random() * 2 - 1) * noise;\n};\n\nfunction updateNoiseMap(width, height, noise, noiseSize) {\n  if (noise && noiseSize) {\n    for (var y = 0; y < height / noiseSize; y += 1) {\n      for (var x = 0; x < width / noiseSize; x += 1) {\n        lodash_default.a.set(noiseMap, [x, y], {\n          rNoise: getDeviation(noise),\n          gNoise: getDeviation(noise),\n          bNoise: getDeviation(noise)\n        });\n      }\n    }\n  }\n}\nfunction noiseFilter(_ref) {\n  var color = _ref.color,\n      mapRGB = _ref.mapRGB,\n      x = _ref.x,\n      y = _ref.y,\n      options = _ref.options;\n  var noise = options.noise,\n      noiseSize = options.noiseSize;\n\n  var _ref2 = color || mapRGB[x][y],\n      r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b;\n\n  if (noise && noiseSize) {\n    var _noiseMap$Math$floor$ = noiseMap[Math.floor(x / noiseSize)][Math.floor(y / noiseSize)],\n        rNoise = _noiseMap$Math$floor$.rNoise,\n        gNoise = _noiseMap$Math$floor$.gNoise,\n        bNoise = _noiseMap$Math$floor$.bNoise;\n    r += rNoise;\n    g += gNoise;\n    b += bNoise;\n  }\n\n  return {\n    color: {\n      r: r,\n      g: g,\n      b: b\n    },\n    mapRGB: mapRGB,\n    x: x,\n    y: y,\n    options: options\n  };\n}\n// CONCATENATED MODULE: ./src/logic/filters/eightBit.js\nfunction snapTo(colors, number) {\n  var totalNumberOfColors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;\n  var snap = totalNumberOfColors / colors;\n  return Math.round(number / snap) * snap;\n}\n\nfunction eightBitFilter(_ref) {\n  var color = _ref.color,\n      mapRGB = _ref.mapRGB,\n      x = _ref.x,\n      y = _ref.y,\n      options = _ref.options;\n  var eightBit = options.eightBit;\n\n  var _ref2 = color || mapRGB[x][y],\n      r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b;\n\n  if (eightBit) {\n    r = snapTo(8, r);\n    g = snapTo(8, g);\n    b = snapTo(4, b);\n  }\n\n  return {\n    color: {\n      r: r,\n      g: g,\n      b: b\n    },\n    mapRGB: mapRGB,\n    x: x,\n    y: y,\n    options: options\n  };\n}\n// CONCATENATED MODULE: ./src/logic/filters/stripes.js\nvar multiply = function multiply(modifier, color) {\n  return Math.min(Math.round(color * (1 + modifier / 100)), 255);\n};\n\nfunction stripesFilter(_ref) {\n  var color = _ref.color,\n      mapRGB = _ref.mapRGB,\n      x = _ref.x,\n      y = _ref.y,\n      options = _ref.options;\n  var rgbSplit = options.rgbSplit,\n      discreteStripes = options.discreteStripes,\n      stripeSize = options.stripeSize,\n      stripesStrength = options.stripesStrength;\n\n  var _ref2 = color || mapRGB[x][y],\n      r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b;\n\n  if (stripeSize && !rgbSplit) {\n    var period = stripeSize / Math.PI;\n    var phase = Math.sin((y + 1) / period);\n\n    if (discreteStripes) {\n      phase = phase > 0 ? 1 : -1;\n    }\n\n    var modifier = phase * stripesStrength;\n    r = multiply(modifier, r);\n    g = multiply(modifier, g);\n    b = multiply(modifier, b);\n  }\n\n  return {\n    color: {\n      r: r,\n      g: g,\n      b: b\n    },\n    mapRGB: mapRGB,\n    x: x,\n    y: y,\n    options: options\n  };\n}\n// CONCATENATED MODULE: ./src/logic/filters/index.js\n\n\n\n// CONCATENATED MODULE: ./src/logic/processing-helpers.js\n\n\nfunction getDivider(_ref) {\n  var image = _ref.image,\n      sizeLimit = _ref.sizeLimit,\n      splitted = _ref.splitted,\n      multiplier = _ref.multiplier;\n  var maxSize = Math.max(image.width, image.height);\n  return maxSize / sizeLimit * (splitted ? 3 * multiplier : 1);\n}\n\nvar triple = function triple(c) {\n  return c.concat(c, c);\n};\n\nvar allFilters = lodash_default.a.flow([eightBitFilter, noiseFilter, stripesFilter]);\n\nvar processing_helpers_makeSetFrame = function makeSetFrame(mapRGB, width, height, options) {\n  return function (_ref2) {\n    var data = _ref2.data;\n    var rgbSplit = options.rgbSplit,\n        noise = options.noise,\n        noiseSize = options.noiseSize;\n    updateNoiseMap(width, height, noise, noiseSize);\n\n    for (var y = 0; y < height; y += 1) {\n      var redLine = [];\n      var greenLine = [];\n      var blueLine = [];\n\n      for (var x = 0; x < width; x += 1) {\n        var _allFilters$color = allFilters({\n          mapRGB: mapRGB,\n          x: x,\n          y: y,\n          options: options\n        }).color,\n            r = _allFilters$color.r,\n            g = _allFilters$color.g,\n            b = _allFilters$color.b;\n\n        if (rgbSplit) {\n          var red = [r, 0, 0, 255];\n          var green = [0, g, 0, 255];\n          var blue = [0, 0, b, 255];\n          redLine = redLine.concat(triple(red));\n          greenLine = greenLine.concat(triple(green));\n          blueLine = blueLine.concat(triple(blue));\n        } else {\n          data.set([r, g, b, 255], (y * width + x) * 4);\n        }\n      }\n\n      if (rgbSplit) {\n        data.set(redLine.concat(greenLine, blueLine), y * width * 3 * 4 * 3);\n      }\n    }\n  };\n};\n// CONCATENATED MODULE: ./src/logic/constants.js\nvar _Animated, _Still, _TrueColor, _RGB;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar IDS = {\n  rgbSplit: \'rgbSplit\',\n  eightBit: \'eightBit\',\n  multiplier: \'multiplier\',\n  discreteStripes: \'discreteStripes\',\n  stripeSize: \'stripeSize\',\n  stripesStrength: \'stripesStrength\',\n  sizeLimit: \'sizeLimit\',\n  noise: \'noise\',\n  noiseSize: \'noiseSize\',\n  sample: \'sample\',\n  animate: \'animate\',\n  frames: \'frames\',\n  delay: \'delay\'\n};\nvar BASE_THROBBER = \'triangles.svg\';\nvar SAMPLE_IMAGES_NAMES = [\'bonfire.jpg\', \'bay.jpg\', \'city.jpg\', \'clouds.jpg\', \'taxi.jpg\'];\n\nvar makeFullPath = function makeFullPath(name) {\n  return "./images/".concat(name);\n};\n\nvar THROBBER = makeFullPath(BASE_THROBBER);\nvar SAMPLE_IMAGE_PATHS = SAMPLE_IMAGES_NAMES.map(makeFullPath);\nvar SETTERS = {\n  Animated: (_Animated = {}, _defineProperty(_Animated, IDS.rgbSplit, false), _defineProperty(_Animated, IDS.eightBit, true), _defineProperty(_Animated, IDS.multiplier, 1), _defineProperty(_Animated, IDS.stripeSize, 3), _defineProperty(_Animated, IDS.stripesStrength, 15), _defineProperty(_Animated, IDS.discreteStripes, false), _defineProperty(_Animated, IDS.sizeLimit, 500), _defineProperty(_Animated, IDS.noise, 15), _defineProperty(_Animated, IDS.noiseSize, 3), _defineProperty(_Animated, IDS.frames, 3), _defineProperty(_Animated, IDS.delay, 800), _Animated),\n  Still: (_Still = {}, _defineProperty(_Still, IDS.rgbSplit, false), _defineProperty(_Still, IDS.eightBit, true), _defineProperty(_Still, IDS.stripeSize, 10), _defineProperty(_Still, IDS.stripesStrength, 10), _defineProperty(_Still, IDS.discreteStripes, false), _defineProperty(_Still, IDS.sizeLimit, 800), _defineProperty(_Still, IDS.noise, 5), _defineProperty(_Still, IDS.noiseSize, 3), _defineProperty(_Still, IDS.frames, 1), _Still),\n  TrueColor: (_TrueColor = {}, _defineProperty(_TrueColor, IDS.rgbSplit, false), _defineProperty(_TrueColor, IDS.eightBit, false), _defineProperty(_TrueColor, IDS.multiplier, 1), _defineProperty(_TrueColor, IDS.stripeSize, 4), _defineProperty(_TrueColor, IDS.stripesStrength, 5), _defineProperty(_TrueColor, IDS.discreteStripes, true), _defineProperty(_TrueColor, IDS.sizeLimit, 500), _defineProperty(_TrueColor, IDS.noise, 10), _defineProperty(_TrueColor, IDS.noiseSize, 4), _defineProperty(_TrueColor, IDS.frames, 4), _defineProperty(_TrueColor, IDS.delay, 200), _TrueColor),\n  RGB: (_RGB = {}, _defineProperty(_RGB, IDS.rgbSplit, true), _defineProperty(_RGB, IDS.eightBit, false), _defineProperty(_RGB, IDS.multiplier, 1), _defineProperty(_RGB, IDS.sizeLimit, 700), _defineProperty(_RGB, IDS.noise, 10), _defineProperty(_RGB, IDS.noiseSize, 1), _defineProperty(_RGB, IDS.frames, 3), _defineProperty(_RGB, IDS.delay, 500), _RGB)\n};\n// CONCATENATED MODULE: ./src/logic/utils.js\nvar _PARAMETER_PROCESSORS;\n\nfunction utils_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar SCALED = \'SCALED\';\nfunction getScaledCanvas(canvas, multiplier) {\n  var imageSmoothingEnabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var scaledCanvas = getCanvas(SCALED);\n  scaledCanvas.width = canvas.width * multiplier;\n  scaledCanvas.height = canvas.height * multiplier;\n  var scaledContext = getContext(SCALED);\n  scaledContext.imageSmoothingEnabled = imageSmoothingEnabled;\n  scaledContext.msImageSmoothingEnabled = imageSmoothingEnabled;\n  scaledContext.scale(multiplier, multiplier);\n  scaledContext.drawImage(canvas, 0, 0);\n  return scaledCanvas;\n}\nvar getImageFromSrc = function getImageFromSrc(src) {\n  return new Promise(function (resolve) {\n    var image = new Image();\n\n    image.onload = function (_ref) {\n      var target = _ref.target;\n      resolve(target);\n    };\n\n    image.src = src;\n  });\n};\n\nvar makeRange = function makeRange(min, max) {\n  return function (value) {\n    return Math.round(Math.min(Math.max(value, min), max));\n  };\n};\n\nvar PARAMETER_PROCESSORS = (_PARAMETER_PROCESSORS = {}, utils_defineProperty(_PARAMETER_PROCESSORS, IDS.stripeSize, makeRange(0, 10)), utils_defineProperty(_PARAMETER_PROCESSORS, IDS.stripesStrength, makeRange(0, 200)), utils_defineProperty(_PARAMETER_PROCESSORS, IDS.sizeLimit, makeRange(0, 1000)), utils_defineProperty(_PARAMETER_PROCESSORS, IDS.noise, makeRange(0, 255)), utils_defineProperty(_PARAMETER_PROCESSORS, IDS.noiseSize, makeRange(0, 10)), utils_defineProperty(_PARAMETER_PROCESSORS, IDS.frames, makeRange(0, 10)), _PARAMETER_PROCESSORS);\n// CONCATENATED MODULE: ./src/logic/image-processing.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nfunction reduceImage(_ref) {\n  var image = _ref.image,\n      sizeLimit = _ref.sizeLimit,\n      options = _objectWithoutProperties(_ref, ["image", "sizeLimit"]);\n\n  var divider = getDivider({\n    image: image,\n    sizeLimit: sizeLimit,\n    splitted: options.rgbSplit,\n    multiplier: options.multiplier\n  });\n  var canvas = getCanvas();\n  var context = getContext();\n  var width = image.width / divider;\n  var height = image.height / divider;\n  canvas.width = width;\n  canvas.height = height;\n  context.drawImage(image, 0, 0, width, height);\n\n  if (getCanvas().width < 1 || getCanvas().height < 1) {\n    return {\n      error: \'Check parameters and image\'\n    };\n  }\n\n  return {\n    data: context.getImageData(0, 0, width, height),\n    options: options\n  };\n}\n\nfunction mapToRGB(_ref2) {\n  var _ref2$data = _ref2.data;\n  _ref2$data = _ref2$data === void 0 ? {} : _ref2$data;\n  var data = _ref2$data.data,\n      width = _ref2$data.width,\n      height = _ref2$data.height,\n      options = _ref2.options,\n      error = _ref2.error;\n  var mapRGB = [];\n\n  for (var x = 0; x < width; x += 1) {\n    for (var y = 0; y < height; y += 1) {\n      var index = (y * width + x) * 4;\n\n      var _data$slice = data.slice(index, index + 3),\n          _data$slice2 = _slicedToArray(_data$slice, 3),\n          r = _data$slice2[0],\n          g = _data$slice2[1],\n          b = _data$slice2[2];\n\n      lodash_default.a.set(mapRGB, [x, y], {\n        r: r,\n        g: g,\n        b: b\n      });\n    }\n  }\n\n  return {\n    mapRGB: mapRGB,\n    options: options,\n    error: error\n  };\n}\n\nfunction makeFrameProcessor(_ref3) {\n  var mapRGB = _ref3.mapRGB,\n      _ref3$options = _ref3.options,\n      options = _ref3$options === void 0 ? {} : _ref3$options,\n      error = _ref3.error;\n\n  if (error) {\n    return {\n      error: error\n    };\n  }\n\n  var width = mapRGB.length;\n\n  if (width === 0) {\n    return {\n      error: \'Zero width\'\n    };\n  }\n\n  var height = mapRGB[0].length;\n  var setFrame = processing_helpers_makeSetFrame(mapRGB, width, height, options);\n  return {\n    setFrame: setFrame,\n    width: width,\n    height: height,\n    options: options\n  };\n}\n\nvar image_processing_addFrames = function addFrames(_ref4) {\n  var setFrame = _ref4.setFrame,\n      initWidth = _ref4.width,\n      initHeight = _ref4.height,\n      _ref4$options = _ref4.options,\n      options = _ref4$options === void 0 ? {} : _ref4$options,\n      error = _ref4.error;\n  return new Promise(function (resolve, reject) {\n    if (error) {\n      reject(new Error(error));\n    }\n\n    var rgbSplit = options.rgbSplit,\n        frames = options.frames,\n        delay = options.delay,\n        multiplier = options.multiplier;\n    var gif = new gif_default.a({\n      workers: 2,\n      quality: 10,\n      workerScript: \'./utils/gif.worker.js\'\n    });\n    var canvas = getCanvas();\n    var context = getContext();\n    var splitMultiplier = rgbSplit ? 3 : 1;\n    var width = initWidth * splitMultiplier;\n    var height = initHeight * splitMultiplier;\n    canvas.width = width;\n    canvas.height = height;\n\n    for (var i = 0; i < frames; i += 1) {\n      var imageData = context.getImageData(0, 0, width, height);\n      setFrame(imageData);\n      context.putImageData(imageData, 0, 0);\n      gif.addFrame(getScaledCanvas(canvas, rgbSplit ? multiplier : 1), {\n        delay: delay,\n        copy: true\n      });\n    }\n\n    gif.on(\'finished\', function (blob) {\n      resolve(window.URL.createObjectURL(blob));\n    });\n    gif.render();\n  });\n};\n\nvar toRGB = lodash_default.a.flow([reduceImage, mapToRGB, makeFrameProcessor, image_processing_addFrames]);\n// CONCATENATED MODULE: ./src/logic/index.js\n\n\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(1);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./src/components/DropImage.css\nvar components_DropImage = __webpack_require__(5);\nvar DropImage_default = /*#__PURE__*/__webpack_require__.n(components_DropImage);\n\n// CONCATENATED MODULE: ./src/components/DropImage.jsx\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction DropImage_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar DropImage_BodyPortal = function BodyPortal(_ref) {\n  var children = _ref.children;\n  return Object(react_dom["createPortal"])(children, document.body);\n};\n\nvar DropImage_DropImage = /*#__PURE__*/function (_Component) {\n  _inherits(DropImage, _Component);\n\n  var _super = _createSuper(DropImage);\n\n  function DropImage(props) {\n    var _this;\n\n    _classCallCheck(this, DropImage);\n\n    _this = _super.call(this, props);\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "state", {\n      output: \'\',\n      isDragOver: false,\n      isFileLoading: false\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "onFileLoad", function (_ref2) {\n      var target = _ref2.target;\n      _this.img.src = target.result;\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "onError", function () {\n      _this.setState({\n        isFileLoading: false,\n        output: \'Try another image, please. If this is an image from other website try to save it locally before dragging.\'\n      });\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "onImageLoad", function (_ref3) {\n      var target = _ref3.target;\n\n      _this.setState({\n        isFileLoading: false,\n        output: \'\'\n      });\n\n      _this.props.onDrop(target);\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "handleDragOver", function (evt) {\n      var dataTransfer = evt.dataTransfer;\n      dataTransfer.dropEffect = \'copy\'; // explicitly show this is a copy\n\n      evt.stopPropagation();\n      evt.preventDefault();\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "handleDragEnter", function () {\n      _this.setState({\n        isDragOver: true\n      });\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "handleDragLeave", function () {\n      _this.setState({\n        isDragOver: false\n      });\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "readAsData", function (file) {\n      try {\n        _this.file.readAsDataURL(file);\n      } catch (e) {\n        _this.onError(e);\n      }\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "handleFileSelect", function (evt) {\n      _this.setState({\n        isDragOver: false,\n        isFileLoading: true\n      });\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      var files = evt.dataTransfer.files;\n      var file = files.item(0);\n      var link = evt.dataTransfer.getData(\'text\');\n      var output;\n\n      if (lodash_default.a.isEmpty(files) && evt.dataTransfer.getData(\'text\') || !file) {\n        output = \'\';\n        _this.img.src = link;\n      } else {\n        output = /*#__PURE__*/react_default.a.createElement("li", {\n          key: file.name\n        }, "".concat(file.name, " (").concat(file.type || \'n/a\', ") - ").concat(file.size, " bytes"));\n      }\n\n      _this.setState({\n        output: output\n      });\n\n      _this.readAsData(file);\n    });\n\n    DropImage_defineProperty(_assertThisInitialized(_this), "handleFile", function (_ref4) {\n      var files = _ref4.target.files;\n\n      _this.readAsData(files.item(0));\n    });\n\n    _this.file = new FileReader();\n    _this.file.onload = _this.onFileLoad;\n    _this.file.onerror = _this.onError;\n    _this.img = new Image();\n    _this.img.onload = _this.onImageLoad;\n    _this.img.onerror = _this.onError;\n    _this.img.crossOrigin = \'Anonymous\';\n    return _this;\n  }\n\n  _createClass(DropImage, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      document.addEventListener(\'dragover\', this.handleDragOver);\n      document.addEventListener(\'dragenter\', this.handleDragEnter);\n      document.addEventListener(\'drop\', this.handleFileSelect);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement("div", {\n        className: DropImage_default.a.header\n      }, /*#__PURE__*/react_default.a.createElement("input", {\n        type: "file",\n        onChange: this.handleFile\n      }), this.props.text), /*#__PURE__*/react_default.a.createElement("div", {\n        className: DropImage_default.a.output\n      }, this.state.output), /*#__PURE__*/react_default.a.createElement(DropImage_BodyPortal, null, this.state.isDragOver && /*#__PURE__*/react_default.a.createElement("div", {\n        className: DropImage_default.a.bodyHover,\n        onDragLeave: this.handleDragLeave\n      }, "Drop it!"), this.state.isFileLoading && /*#__PURE__*/react_default.a.createElement("div", {\n        className: DropImage_default.a.bodyHover\n      }, "Loading...")));\n    }\n  }]);\n\n  return DropImage;\n}(react["Component"]);\n\nDropImage_defineProperty(DropImage_DropImage, "propTypes", {\n  onDrop: prop_types_default.a.func,\n  text: prop_types_default.a.string\n});\n\nDropImage_defineProperty(DropImage_DropImage, "defaultProps", {\n  onDrop: lodash_default.a.noop,\n  text: \'or drag an image on the page\'\n});\n\n\n// EXTERNAL MODULE: ./src/components/presentational/style.css\nvar style = __webpack_require__(4);\nvar style_default = /*#__PURE__*/__webpack_require__.n(style);\n\n// EXTERNAL MODULE: ./node_modules/state-control/es/index.js + 14 modules\nvar es = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/components/presentational/Samples.jsx\n\n\n\n\n\n\nvar Samples_Samples = function Samples(_ref) {\n  var selectImage = _ref.selectImage;\n  return /*#__PURE__*/react_default.a.createElement("div", {\n    className: style_default.a.samples\n  }, /*#__PURE__*/react_default.a.createElement("p", null, "Or select one of the samples:"), SAMPLE_IMAGE_PATHS.map(function (sample) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line max-len\n      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions,jsx-a11y/click-events-have-key-events\n      react_default.a.createElement("img", {\n        key: sample,\n        src: sample,\n        onClick: selectImage(sample),\n        alt: "Sample"\n      })\n    );\n  }));\n};\n\nSamples_Samples.propTypes = {\n  selectImage: prop_types_default.a.func\n};\nSamples_Samples.defaultProps = {\n  selectImage: lodash_default.a.noop\n};\n/* harmony default export */ var presentational_Samples = (Samples_Samples);\n// CONCATENATED MODULE: ./src/components/presentational/Controls.jsx\nvar _objectSpread3;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Controls_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Controls_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nvar Controls_Controls = function Controls(_ref) {\n  var state = _ref.state,\n      handleChange = _ref.handleChange,\n      selectImage = _ref.selectImage;\n  return /*#__PURE__*/react_default.a.createElement("div", {\n    className: style_default.a.controls\n  }, /*#__PURE__*/react_default.a.createElement(presentational_Samples, {\n    selectImage: selectImage\n  }), /*#__PURE__*/react_default.a.createElement(es["d" /* SettersBlock */], {\n    className: style_default.a.setters,\n    setters: SETTERS,\n    setHandler: handleChange\n  }), /*#__PURE__*/react_default.a.createElement(es["b" /* Connector */], {\n    state: state,\n    onChange: handleChange,\n    type: "number"\n  }, /*#__PURE__*/react_default.a.createElement(es["a" /* Check */], {\n    id: IDS.rgbSplit,\n    label: "Split RGB",\n    type: "boolean",\n    className: style_default.a.check\n  }), /*#__PURE__*/react_default.a.createElement(es["a" /* Check */], {\n    id: IDS.eightBit,\n    label: "8-bit color",\n    type: "boolean",\n    className: style_default.a.check\n  }), state[IDS.rgbSplit] && /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.multiplier,\n    label: "Pixelization:"\n  }), !state[IDS.rgbSplit] && /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.stripeSize,\n    label: "Stripe size:",\n    step: 1\n  }), !state[IDS.rgbSplit] && state[IDS.stripeSize] > 0 && /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.stripesStrength,\n    label: "Stripes strength:",\n    step: 5\n  }), !state[IDS.rgbSplit] && state[IDS.stripeSize] > 0 && /*#__PURE__*/react_default.a.createElement(es["a" /* Check */], {\n    id: IDS.discreteStripes,\n    label: "Discrete stripes",\n    type: "boolean",\n    className: style_default.a.check\n  }), /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.sizeLimit,\n    label: "Size limit:",\n    step: 100\n  }), /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.noise,\n    label: "Color noise:"\n  }), state[IDS.noise] > 0 && /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.noiseSize,\n    label: "Noise size:"\n  }), /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.frames,\n    label: "Frames:"\n  }), state[IDS.frames] > 1 && /*#__PURE__*/react_default.a.createElement(es["c" /* Input */], {\n    id: IDS.delay,\n    label: "Delay:",\n    step: 100\n  })));\n};\n\nControls_Controls.propTypes = {\n  state: prop_types_default.a.shape(_objectSpread(_objectSpread({}, lodash_default.a.reduce(IDS, function (all, item) {\n    return _objectSpread(_objectSpread({}, all), {}, Controls_defineProperty({}, item, prop_types_default.a.number));\n  }, {})), {}, (_objectSpread3 = {}, Controls_defineProperty(_objectSpread3, IDS.rgbSplit, prop_types_default.a.bool), Controls_defineProperty(_objectSpread3, IDS.eightBit, prop_types_default.a.bool), Controls_defineProperty(_objectSpread3, IDS.discreteStripes, prop_types_default.a.bool), _objectSpread3))).isRequired,\n  handleChange: prop_types_default.a.func,\n  selectImage: prop_types_default.a.func\n};\nControls_Controls.defaultProps = {\n  handleChange: lodash_default.a.noop,\n  selectImage: lodash_default.a.noop\n};\n/* harmony default export */ var presentational_Controls = (Controls_Controls);\n// CONCATENATED MODULE: ./src/components/presentational/Animation.jsx\n\n\n\n\n\nvar Animation_Animation = function Animation(_ref) {\n  var setImageRef = _ref.setImageRef,\n      error = _ref.error;\n  return /*#__PURE__*/react_default.a.createElement("div", {\n    className: style_default.a.animation\n  }, error ? /*#__PURE__*/react_default.a.createElement("div", {\n    className: style_default.a.error\n  }, error) : /*#__PURE__*/react_default.a.createElement("p", null, "Do right click on the image and select \\u201CSave image as...\\u201D"), /*#__PURE__*/react_default.a.createElement("img", {\n    ref: setImageRef,\n    alt: "Generated animation"\n  }));\n};\n\nAnimation_Animation.propTypes = {\n  setImageRef: prop_types_default.a.func,\n  error: prop_types_default.a.string\n};\nAnimation_Animation.defaultProps = {\n  setImageRef: lodash_default.a.noop,\n  error: \'\'\n};\n/* harmony default export */ var presentational_Animation = (Animation_Animation);\n// CONCATENATED MODULE: ./src/components/presentational/index.js\n\n\n\n\n// CONCATENATED MODULE: ./src/components/RGBFilter.jsx\nfunction RGBFilter_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { RGBFilter_typeof = function _typeof(obj) { return typeof obj; }; } else { RGBFilter_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return RGBFilter_typeof(obj); }\n\nfunction RGBFilter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction RGBFilter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { RGBFilter_ownKeys(Object(source), true).forEach(function (key) { RGBFilter_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { RGBFilter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction RGBFilter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction RGBFilter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RGBFilter_createClass(Constructor, protoProps, staticProps) { if (protoProps) RGBFilter_defineProperties(Constructor.prototype, protoProps); if (staticProps) RGBFilter_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction RGBFilter_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) RGBFilter_setPrototypeOf(subClass, superClass); }\n\nfunction RGBFilter_setPrototypeOf(o, p) { RGBFilter_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return RGBFilter_setPrototypeOf(o, p); }\n\nfunction RGBFilter_createSuper(Derived) { var hasNativeReflectConstruct = RGBFilter_isNativeReflectConstruct(); return function () { var Super = RGBFilter_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = RGBFilter_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return RGBFilter_possibleConstructorReturn(this, result); }; }\n\nfunction RGBFilter_possibleConstructorReturn(self, call) { if (call && (RGBFilter_typeof(call) === "object" || typeof call === "function")) { return call; } return RGBFilter_assertThisInitialized(self); }\n\nfunction RGBFilter_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction RGBFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction RGBFilter_getPrototypeOf(o) { RGBFilter_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return RGBFilter_getPrototypeOf(o); }\n\nfunction RGBFilter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar RGBFilter_RGBFilter = /*#__PURE__*/function (_Component) {\n  RGBFilter_inherits(RGBFilter, _Component);\n\n  var _super = RGBFilter_createSuper(RGBFilter);\n\n  function RGBFilter() {\n    var _this;\n\n    RGBFilter_classCallCheck(this, RGBFilter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    RGBFilter_defineProperty(RGBFilter_assertThisInitialized(_this), "state", RGBFilter_objectSpread(RGBFilter_objectSpread({}, SETTERS[Object.keys(SETTERS)[0]]), {}, {\n      error: null\n    }));\n\n    RGBFilter_defineProperty(RGBFilter_assertThisInitialized(_this), "loaded", false);\n\n    RGBFilter_defineProperty(RGBFilter_assertThisInitialized(_this), "setImageRef", function (e) {\n      _this.image = e;\n      _this.loaded = true;\n    });\n\n    RGBFilter_defineProperty(RGBFilter_assertThisInitialized(_this), "handleDrop", function (image) {\n      _this.setState({\n        image: image\n      });\n    });\n\n    RGBFilter_defineProperty(RGBFilter_assertThisInitialized(_this), "handleChange", function (name, value) {\n      _this.setState(RGBFilter_defineProperty({}, name, (PARAMETER_PROCESSORS[name] || function (v) {\n        return v;\n      })(value)));\n    });\n\n    RGBFilter_defineProperty(RGBFilter_assertThisInitialized(_this), "handleSelectImage", function (sample) {\n      return function () {\n        getImageFromSrc(sample).then(function (image) {\n          _this.setState({\n            image: image\n          });\n        });\n      };\n    });\n\n    return _this;\n  }\n\n  RGBFilter_createClass(RGBFilter, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.handleSelectImage(SAMPLE_IMAGE_PATHS[0])();\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var image = this.state.image;\n\n      if (this.image && image) {\n        this.image.src = THROBBER;\n        toRGB(this.state).then(function (src) {\n          _this2.image.src = src;\n\n          if (_this2.state.error) {\n            _this2.setState({\n              error: null\n            });\n          }\n        })["catch"](function (error) {\n          if (!_this2.state.error) {\n            _this2.setState({\n              error: error.toString()\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return /*#__PURE__*/react_default.a.createElement("div", {\n        className: style_default.a.application\n      }, /*#__PURE__*/react_default.a.createElement("div", {\n        className: style_default.a.leftPane\n      }, /*#__PURE__*/react_default.a.createElement(DropImage_DropImage, {\n        onDrop: this.handleDrop,\n        text: "or drag and drop your image anywhere on the page"\n      }), /*#__PURE__*/react_default.a.createElement(presentational_Controls, {\n        state: this.state,\n        handleChange: this.handleChange,\n        selectImage: this.handleSelectImage\n      })), /*#__PURE__*/react_default.a.createElement("div", {\n        className: style_default.a.rightPane,\n        style: {\n          visibility: this.loaded ? \'visible\' : \'hidden\'\n        }\n      }, /*#__PURE__*/react_default.a.createElement(presentational_Animation, {\n        setImageRef: this.setImageRef,\n        error: this.state.error\n      })));\n    }\n  }]);\n\n  return RGBFilter;\n}(react["Component"]);\n\n\n// CONCATENATED MODULE: ./src/components/App.jsx\n\n\n\nvar App_App = function App() {\n  return /*#__PURE__*/react_default.a.createElement(react["StrictMode"], null, /*#__PURE__*/react_default.a.createElement(RGBFilter_RGBFilter, null));\n};\n\n/* harmony default export */ var components_App = (App_App);\n// CONCATENATED MODULE: ./src/index.jsx\n\n\n\n\nObject(react_dom["render"])( /*#__PURE__*/react_default.a.createElement(components_App, null), document.querySelector(\'#app\'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},4:function(module,exports,__webpack_require__){eval('// extracted by mini-css-extract-plugin\nmodule.exports = {"application":"style__application__1pZ2x","leftPane":"style__leftPane__kVXGS","rightPane":"style__rightPane__3faag","setters":"style__setters__2Mo3S","controls":"style__controls__v2gwb","check":"style__check__2hNIt","samples":"style__samples__3A5tX","animation":"style__animation__2tLY9","error":"style__error__1WRBa"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcmVzZW50YXRpb25hbC9zdHlsZS5jc3M/NjRjYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtCQUFrQiIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImFwcGxpY2F0aW9uXCI6XCJzdHlsZV9fYXBwbGljYXRpb25fXzFwWjJ4XCIsXCJsZWZ0UGFuZVwiOlwic3R5bGVfX2xlZnRQYW5lX19rVlhHU1wiLFwicmlnaHRQYW5lXCI6XCJzdHlsZV9fcmlnaHRQYW5lX18zZmFhZ1wiLFwic2V0dGVyc1wiOlwic3R5bGVfX3NldHRlcnNfXzJNbzNTXCIsXCJjb250cm9sc1wiOlwic3R5bGVfX2NvbnRyb2xzX192Mmd3YlwiLFwiY2hlY2tcIjpcInN0eWxlX19jaGVja19fMmhOSXRcIixcInNhbXBsZXNcIjpcInN0eWxlX19zYW1wbGVzX18zQTV0WFwiLFwiYW5pbWF0aW9uXCI6XCJzdHlsZV9fYW5pbWF0aW9uX18ydExZOVwiLFwiZXJyb3JcIjpcInN0eWxlX19lcnJvcl9fMVdSQmFcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},5:function(module,exports,__webpack_require__){eval('// extracted by mini-css-extract-plugin\nmodule.exports = {"header":"DropImage__header__3ENrf","output":"DropImage__output__1EpGt","bodyHover":"DropImage__bodyHover__2fO6o"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wSW1hZ2UuY3NzPzA2YTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0IiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJoZWFkZXJcIjpcIkRyb3BJbWFnZV9faGVhZGVyX18zRU5yZlwiLFwib3V0cHV0XCI6XCJEcm9wSW1hZ2VfX291dHB1dF9fMUVwR3RcIixcImJvZHlIb3ZlclwiOlwiRHJvcEltYWdlX19ib2R5SG92ZXJfXzJmTzZvXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')}});